buildscript {
    repositories {
        mavenLocal()
        maven { url ossimMavenProxy }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.2.9"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.8"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.12'
        classpath 'io.ossim:gradleDefaults:1.8-SNAPSHOT'
    }
}

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-web"
apply plugin:"asset-pipeline"
apply plugin:"com.moowork.node"
apply plugin:"org.grails.plugins.views-json"


repositories {
    mavenLocal()
    maven { url ossimMavenProxy }
}

io.ossim.gradleDefaults.Variables.setAdditionalVariables( project )
io.ossim.gradleDefaults.Variables.setVersionVariables( project )
dockerBuildDir="${ rootProject.projectDir }/docker"
version "${ buildVersion }-${ buildVersionTag }"
jarDestination = "${ projectDir }/build/libs/${ project.name }-${ version }.jar"
io.ossim.gradleDefaults.Docker.addDockerTasks( project, dockerRegistryUrl, dockerRegistryUsername, dockerRegistryPassword, name, dockerImageTag, dockerBuildDir, jarDestination, [ "BASE_IMAGE": "${ dockerRegistryUrl }/${ dockerBaseImage }:${ dockerFromTag }" ])
io.ossim.gradleDefaults.Openshift.addOpenshiftTasks( project, openshiftUrl, openshiftUsername, openshiftPassword, openshiftProjectName, openshiftServiceName, dockerRegistryUrl, name, dockerImageTag )

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudDependencyV}"
    }
    applyMavenExclusions false
}

dependencies {
    compile "io.ossim.omar.plugins:omar-core-plugin:+"

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.6.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    console "org.grails:grails-console"
    profile "org.grails.profiles:vue"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.8"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-datastore-rest-client"
    testCompile "org.grails:grails-web-testing-support"

    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
}

//bootRun {
//    jvmArgs('-Dspring.output.ansi.enabled=always')
//    addResources = true
//    String springProfilesActive = 'spring.profiles.active'
//    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
//}

assets {
    minifyJs = true
    minifyCss = true
}
